I'm working with an agentic coding boilerplate project that includes authentication, database integration, and AI capabilities. Here's what's already set up:

## Current Agentic Coding Boilerplate Structure
- Authentication: Better Auth with Google OAuth integration
- Database: Drizzle ORM with PostgreSQL setup
- AI Integration: Vercel AI SDK with OpenAI integration
- UI: shadcn/ui components with Tailwind CSS
- Current Routes:
  - `/` - Home page with setup instructions and feature overview
  - `/dashboard` - Protected dashboard page (requires authentication)
  - `/chat` - AI chat interface (requires OpenAI API key)

## Important Context
This is an agentic coding boilerplate/starter template - all existing pages and components are meant to be examples and should be completely replaced to build the actual AI-powered application.

### CRITICAL: You MUST Override All Boilerplate Content
DO NOT keep any boilerplate components, text, or UI elements unless explicitly requested. This includes:
- Remove all placeholder/demo content
- Replace the entire navigation structure
- Override all page content completely
- Remove or replace all example components
- Replace placeholder routes and pages with the actual application functionality

### Required Actions:
1. Start Fresh
2. Complete Replacement
3. No Hybrid Approach
4. Clean Slate

Preserve ONLY:
- Installed libraries/dependencies
- Authentication system
- Database setup (can modify schema)
- Core config files
- Build/dev scripts

## Tech Stack
- Next.js 15 (App Router), TypeScript, Tailwind, shadcn/ui, Lucide
- Better Auth, Drizzle + PostgreSQL
- Vercel AI SDK (OpenAI)

## AI Model Configuration
// ✓ Correct
const model = process.env.OPENAI_MODEL || "gpt-5-mini";
model: openai(model)
// ✗ Incorrect
// model: openai("gpt-5-mini")

## What I Want to Build
**FitFlick** — l’utilisateur charge **1 photo de lui** (ou courte vidéo portrait) + **1 photo de vêtement** (ou URL produit). L’app génère un **clip court (3–5 s)** où l’utilisateur apparaît **portant le vêtement**, avec léger mouvement (clignement, micro-pan, zoom).

### Core Features (MVP)
- Upload user photo (selfie, cadrage buste) + garment photo (à plat / e-commerce).
- Pose & segmentation: détecter silhouette, keypoints, masque vêtement.
- Virtual try-on: warper le vêtement sur la personne (VTON) et harmoniser couleurs/ombres.
- (Optionnel) Micro-mouvement: 3–5 s via Ken Burns / léger morph / head motion (API vidéo).
- Export: MP4 1080×1920 (9:16) + 1080p 16:9.
- **Aucune génération payante avant paiement**: preview gratuite = simple mock (overlay statique, FFmpeg).

### Routes (replace boilerplate)
- `/` Landing + galeries démo
- `/auth/*`
- `/projects` (liste)
- `/projects/new` (upload user + garment)
- `/projects/:id/editor` (segmentation preview, ajustements)
- `/projects/:id/preview` (preview gratuit: composite statique)
- `/projects/:id/checkout` (paiement: one-shot / abonnement)
- `/projects/:id/generate` (POST après paiement)
- `/projects/:id/renders` (téléchargements)

### DB (Drizzle)
- `users`
- `projects(id, user_id, title, status, created_at, updated_at)`
- `assets(id, project_id, type('user_photo'|'garment'|'video'|'mask'), url, meta_json)`
- `jobs(id, project_id, type, status, error, payload_json, result_json, created_at, updated_at)`
- `renders(id, project_id, format('9x16'|'16x9'), url, size_bytes, created_at)`
- `billing_events(id, user_id, project_id?, kind, amount_cents, metadata_json, created_at)`

### Pipeline après paiement
1. **SEGMENT_USER**: body/cloth segmentation (API ou self-host) → masque.
2. **TRY_ON**: VTON (virtual try-on) → image composite HD.
3. **ANIMATE_MICRO** (optionnel): 3–5s (Ken Burns/face subtle motion).
4. **EXPORT**: 9:16 & 16:9 (FFmpeg), upload R2/S3.
5. **DELIVER**: webhooks/progress.

### Zero-Cost Preview
- Composite statique: user_photo + garment overlay (opacité/warp approximatif) + watermark (FFmpeg).
- Aucun appel d’API payant.

### Guardrails
- Taille max fichiers (free), filigrane en preview, pas d’API payante avant paiement.
- Stockage privé par défaut, suppression sur demande.

## Request
Replace the entire boilerplate with FitFlick.

## Final Reminder: COMPLETE REPLACEMENT REQUIRED
No boilerplate remnants.

## Post-Implementation Documentation
Create `/docs/features/*` for: segmentation, try-on, animation, billing, privacy.
